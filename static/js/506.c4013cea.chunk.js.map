{"version":3,"file":"static/js/506.c4013cea.chunk.js","mappings":"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","sources":["components/Game.js","haversine.js"],"sourcesContent":["import './Game.css';\nimport React, { Component } from 'react';\nimport placeList from '../placeList';\nimport PropTypes from 'prop-types';\nimport { Container, Button, Dropdown, Table, Icon } from 'semantic-ui-react';\nimport 'semantic-ui-css/semantic.min.css';\nimport places from '../placeList';\nimport haversine from '../haversine';\nimport Swal from 'sweetalert2';\n\n\nexport default class Game extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.places = places;\n\t\tthis.state = {\n\t\t\tguess: '',\n\t\t\tplaceList,\n\t\t\tguesses: [],\n\t\t};\n\t}\n\n\tcomponentDidMount = () => {\n\t\tconsole.log('Game component loaded');\n\t};\n\n\thandleGuess = () => {\n\t\tconst guess = this.state.guess;\n\t\tconst prevGuesses = this.state.guesses;\n\t\tconst correctPlace = this.props.place;\n\t\tlet newGuesses;\n\n\t\tif (guess === correctPlace.text) {\n\t\t\tnewGuesses = [...prevGuesses, { guess, correct: '<i class=\\'icon checkmark green\\' />', distance: '0m' }];\n\t\t\tSwal.fire({\n\t\t\t\ttitleText: 'Congratulations!',\n\t\t\t\thtml: `\n\t\t\t\t\t<p>You guessed the place correctly!</p>\n\t\t\t\t`,\n\t\t\t\ticon: 'success',\n\t\t\t\tconfirmButtonText: 'Play Again',\n\t\t\t}).then(({ isConfirmed }) => {\n\t\t\t\tif (isConfirmed) location.reload();\n\t\t\t});\n\t\t}\n\t\telse if (guess !== correctPlace.text) {\n\t\t\t// eslint-disable-next-line no-shadow\n\t\t\tconst place = places.find(place => place.text === guess);\n\t\t\tconst distance = Math.round(haversine(\n\t\t\t\t[correctPlace.lat, correctPlace.long],\n\t\t\t\t[place.lat, place.long],\n\t\t\t) * 1000);\n\t\t\tnewGuesses = [...prevGuesses, { guess, correct: '<i class=\\'icon x red\\' />', distance: `${distance}m` }];\n\t\t\tif (newGuesses.length >= 4) {\n\t\t\t\tSwal.fire({\n\t\t\t\t\ttitleText: 'Oops...',\n\t\t\t\t\thtml: `\n\t\t\t\t\t\t<p>You guessed the place incorrectly!</p>\n\t\t\t\t\t\t<p>The correct place is ${correctPlace.text}</p>\n\t\t\t\t\t`,\n\t\t\t\t\ticon: 'error',\n\t\t\t\t\tconfirmButtonText: 'Play Again',\n\t\t\t\t}).then(({ isConfirmed }) => {\n\t\t\t\t\tif (isConfirmed) location.reload();\n\t\t\t\t});\n\t\t\t}\n\t\t\telse {\n\t\t\t\tSwal.fire({\n\t\t\t\t\ttitleText: 'Oops...',\n\t\t\t\t\thtml: `\n\t\t\t\t\t\t<p>You guessed the place incorrectly!</p>\n\t\t\t\t\t`,\n\t\t\t\t\ticon: 'error',\n\t\t\t\t\tconfirmButtonText: 'Try Again',\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\tthis.setState({ guesses: newGuesses });\n\t};\n\n\trender() {\n\t\treturn (\n\t\t\t<Container style={{\n\t\t\t\tpaddingBottom: '70px',\n\t\t\t}}>\n\t\t\t\t<h2 className='center'>Guess this place:</h2>\n\t\t\t\t<div className='center'>\n\t\t\t\t\t<iframe src={this.props.place.url} />\n\t\t\t\t\t<Dropdown\n\t\t\t\t\t\tplaceholder='Guess a place'\n\t\t\t\t\t\tfluid search selection options={this.places}\n\t\t\t\t\t\tonChange={(e) => {\n\t\t\t\t\t\t\tthis.setState({ guess: e.target.innerText });\n\t\t\t\t\t\t}}\n\t\t\t\t\t/>\n\t\t\t\t\t<Button className='center toppadded' color='blue' fluid onClick={this.handleGuess}>\n\t\t\t\t\t\t<img alt=\"🌍\"\n\t\t\t\t\t\t\tsrc=\"https://twemoji.maxcdn.com/2/72x72/1f30d.png\"\n\t\t\t\t\t\t\tclassName=\"globe\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t&nbsp;&nbsp;Guess\n\t\t\t\t\t</Button>\n\t\t\t\t\t<Table singleLine>\n\t\t\t\t\t\t<Table.Header>\n\t\t\t\t\t\t\t<Table.Row>\n\t\t\t\t\t\t\t\t<Table.HeaderCell>Guess</Table.HeaderCell>\n\t\t\t\t\t\t\t\t<Table.HeaderCell><Icon name='checkmark' className='green' />/<Icon className='red' name='x' /></Table.HeaderCell>\n\t\t\t\t\t\t\t\t<Table.HeaderCell>Distance from correct place (if <Icon className='red' name='x' />)</Table.HeaderCell>\n\t\t\t\t\t\t\t</Table.Row>\n\t\t\t\t\t\t</Table.Header>\n\t\t\t\t\t\t<Table.Body>\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tthis.state.guesses.map((guess) => {\n\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t<Table.Row key={guess.guess}>\n\t\t\t\t\t\t\t\t\t\t\t<Table.Cell>{guess.guess}</Table.Cell>\n\t\t\t\t\t\t\t\t\t\t\t<Table.Cell><span dangerouslySetInnerHTML={{ __html: guess.correct }}></span></Table.Cell>\n\t\t\t\t\t\t\t\t\t\t\t<Table.Cell>{guess.distance}</Table.Cell>\n\t\t\t\t\t\t\t\t\t\t</Table.Row>\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t</Table.Body>\n\t\t\t\t\t\t<Table.Footer>\n\t\t\t\t\t\t\t<Table.Row>\n\t\t\t\t\t\t\t\t<Table.HeaderCell colSpan='3'>{4 - this.state.guesses.length}/4 guesses left</Table.HeaderCell>\n\t\t\t\t\t\t\t</Table.Row>\n\t\t\t\t\t\t</Table.Footer>\n\t\t\t\t\t</Table>\n\t\t\t\t</div>\n\t\t\t</Container>\n\t\t);\n\t}\n}\n\nGame.propTypes = {\n\tplace: PropTypes.object.isRequired,\n};","/**\n* Calculates the haversine distance between point A, and B.\n* @param {number[]} latlngA [lat, lng] point A\n* @param {number[]} latlngB [lat, lng] point B\n* @param {boolean} [isMiles=false] whether to use miles or km\n* @return {number} distance between A and B\n*/\n\nexport default ([lat1, lon1], [lat2, lon2], isMiles = false) => {\n\tconst toRadian = angle => (Math.PI / 180) * angle;\n\tconst distance = (a, b) => (Math.PI / 180) * (a - b);\n\tconst RADIUS_OF_EARTH_IN_KM = 6371;\n\n\tconst dLat = distance(lat2, lat1);\n\tconst dLon = distance(lon2, lon1);\n\n\tlat1 = toRadian(lat1);\n\tlat2 = toRadian(lat2);\n\n\t// Haversine Formula\n\tconst a =\n\t\tMath.pow(Math.sin(dLat / 2), 2) +\n    Math.pow(Math.sin(dLon / 2), 2) * Math.cos(lat1) * Math.cos(lat2);\n\tconst c = 2 * Math.asin(Math.sqrt(a));\n\n\tlet finalDistance = RADIUS_OF_EARTH_IN_KM * c;\n\n\tif (isMiles) {\n\t\tfinalDistance /= 1.60934;\n\t}\n\n\treturn finalDistance;\n};"],"names":["Game","props","componentDidMount","console","log","handleGuess","newGuesses","guess","state","prevGuesses","guesses","correctPlace","place","text","correct","distance","Swal","titleText","html","icon","confirmButtonText","then","isConfirmed","location","reload","places","Math","round","lat1","lon1","lat2","lon2","isMiles","toRadian","angle","PI","a","b","RADIUS_OF_EARTH_IN_KM","dLat","dLon","pow","sin","cos","c","asin","sqrt","finalDistance","haversine","lat","long","length","setState","placeList","Container","style","paddingBottom","className","src","this","url","Dropdown","placeholder","fluid","search","selection","options","onChange","e","target","innerText","Button","color","onClick","alt","Table","singleLine","Icon","name","map","dangerouslySetInnerHTML","__html","colSpan","Component"],"sourceRoot":""}